theory X3DH
begin

builtins: symmetric-encryption, diffie-hellman, signing, hashing

rule Client_initialisation :
    let
        IK = 'g'^~IK_pr
        SPK = 'g'^~SPK_pr
        Sig = sign(<SPK, IK>, ~IK_pr)
        OPK = 'g'^~OPK_pr
    in
    [
        Fr(~IK_pr),
        Fr(~SPK_pr),
        Fr(~OPK_pr)
    ]
    -->
    [
        !Client_IK(~IK_pr, IK),
        !Client_SPK(IK, ~SPK_pr, SPK),
        Client_OPK(IK, ~OPK_pr, OPK),
        Out(<IK, SPK, Sig, OPK>)
    ]

rule Server_receives_initialisation :
    [
        In(<IK, SPK, Sig, OPK>)
    ]
    -->
    [
        !Bundle(<IK, SPK, Sig>),
        Onetime_Bundle(<IK, SPK, Sig, OPK>)
    ]

rule Client_Requests_Prebundle :
    [
        !Client_IK(IK_A_pr, IK_A),
        !Client_IK(IK_B_pr, IK_B)
    ]
    -->
    [
        Out(<IK_A, IK_B>)
    ]

rule Server_Sends_Prebundle :
    [
        In(<IK_A, IK_B>),
        Onetime_Bundle(<IK_B, SPK_B, Sig, OPK>)
    ]
    -->
    [
        Out(<IK_B, SPK_B, Sig, OPK>)
    ]

rule Initiator_Receives_Prebundle :
    let
        EK_A = 'g'^~EK_A_pr
        DH1 = SPK_B^IK_A_pr
        DH2 = IK_B^~EK_A_pr
        DH3 = SPK_B^~EK_A_pr
        DH4 = OPK_B^~EK_A_pr
        AD = <IK_A, IK_B>
        key = h(<DH1, DH2, DH3, DH4>)
        enc = <senc(~message, key), senc(AD, key)>
        Sig_B = sign(<SPK_B, IK_B>, IK_B_pr)
    in
    [
        !Client_IK(IK_A_pr, IK_A),
        !Client_IK(IK_B_pr, IK_B),
        Fr(~EK_A_pr),
        Fr(~message),
        In(<IK_B, SPK_B, Sig_B, OPK_B>)
    ]
    --[ Session(IK_A, IK_B, key) ]->
    [
        Session(IK_A, IK_B, key),
        Out(<IK_A, EK_A, IK_B, SPK_B, OPK_B, enc>)
    ]

rule Receiver_receives_message :
    let
        DH1 = IK_A^SPK_B_pr
        DH2 = EK_A^IK_B_pr
        DH3 = EK_A^SPK_B_pr
        DH4 = EK_A^OPK_B_pr
        AD = <IK_A, IK_B>
        key = h(<DH1, DH2, DH3, DH4>)
        enc = <senc(message, key), senc(AD, key)>
    in
    [
        !Client_IK(IK_B_pr, IK_B),
        !Client_SPK(IK_B, SPK_B_pr, SPK_B),
        Client_OPK(IK_B, OPK_B_pr, OPK_B),
        In(<IK_A, EK_A, IK_B, SPK_B, OPK_B, enc>)
    ]
    --[ Session(IK_B, IK_A, key) ]->
    [
        Session(IK_B, IK_A, key)
    ]




lemma Sanity :
    exists-trace
    "Ex alice bob key #t1 #t2 . Session(alice, bob, key) @ #t1 & Session(bob, alice, key) @ #t2"

end